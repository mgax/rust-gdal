name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:


jobs:

  ubuntu_20_04:
    name: "ci ubuntu-20.04"
    runs-on: "ubuntu-20.04"
    env:
      RUSTFLAGS: "-Zsanitizer=address "
      RUSTDOCFLAGS: "-Zsanitizer=address "
      # Because we don't build GDAL with sanitizers, we need to turn off
      # leak detection, otherwise it'll report memory leak false positives
      ASAN_OPTIONS: "detect_leaks=0"
    
    strategy:
      matrix:
        features: ["", "--all-features"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install GDAL
        run: |
          sudo apt-get update
          sudo apt-get install libgdal-dev gdal-bin build-essential
          export C_INCLUDE_PATH=/usr/include/gdal:$C_INCLUDE_PATH
          export CPLUS_INCLUDE_PATH=/usr/include/gdal:$CPLUS_INCLUDE_PATH
          sudo ldconfig
      - name: Setup building
        run: |
          export CC="clang-9"
          export CXX="clang++-9"
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          default: true
          components: "clippy, rustfmt, rust-src"
      - name: Check with Rustfmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
      - name: Check with Clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-targets ${{ matrix.features }} -- -D warnings
      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: ${{ matrix.features }} --verbose --target x86_64-unknown-linux-gnu -Zbuild-std
      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: ${{ matrix.features }} --verbose --target x86_64-unknown-linux-gnu -Zbuild-std
